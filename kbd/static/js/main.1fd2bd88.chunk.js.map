{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["keys","App","useState","Math","floor","random","length","key","setKey","correct","incorrect","stat","setStat","seconds","setSeconds","useEffect","handleUserKeyPress","e","console","log","document","addEventListener","removeEventListener","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","percent","className","style","position","top","left","transform","fontSize","bottom","padding","right","width","backgroundColor","marginRight","height","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0wBAsBA,IAAMA,EACJ,qDA0EaC,MAxEf,WAAgB,IAAD,EACWC,mBAClBF,EAAKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,UAF9B,mBACJC,EADI,KACCC,EADD,OAIaN,mBAAS,CAAEO,QAAS,EAAGC,UAAW,IAJ/C,mBAIJC,EAJI,KAIEC,EAJF,OAKmBV,mBAAS,GAL5B,mBAKJW,EALI,KAKKC,EALL,KAOXC,qBAAU,WACN,IAAMC,EAAqB,SAAAC,GACvBC,QAAQC,IAAIF,EAAEV,IAAKA,GACfU,EAAEV,MAAQA,GACVC,EAAOR,EAAKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,UAC5CM,EAAQ,EAAD,GAAMD,EAAN,CAAYF,QAASE,EAAKF,QAAU,MAE3CG,EAAQ,EAAD,GAAMD,EAAN,CAAYD,UAAWC,EAAKD,UAAY,MAIvD,OADAU,SAASC,iBAAiB,WAAYL,GAC/B,WACHI,SAASE,oBAAoB,WAAYN,OA1CrD,SAAqBO,EAAUC,GAC3B,IAAMC,EAAgBC,mBAGtBX,qBAAU,WACNU,EAAcE,QAAUJ,IACzB,CAACA,IAGJR,qBAAU,WAIN,GAAc,OAAVS,EAAgB,CAChB,IAAII,EAAKC,aAJb,WACIJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAEhC,CAACJ,IA6BJO,EAAY,WACRjB,EAAWD,EAAU,KACtB,KAEH,IAQMmB,EAAU7B,KAAKC,MAChBO,EAAKF,SAAWE,EAAKF,QAAUE,EAAKD,WAAc,KAGvD,OACI,yBAAKuB,UAAU,OACX,yBAAKC,MAdE,CACXC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,SAAU,UASehC,GACrB,yBACI2B,MAAO,CACHC,SAAU,QACVK,OAAQ,EACRH,KAAM,EACNI,QAAS,SAGb,4BACI,+DAAY5B,EAAZ,8EACA,uFAAgBF,EAAKF,SACrB,oGAAmBE,EAAKD,WACxB,0GACoBC,EAAKF,QAAUE,EAAKD,UADxC,OACuDsB,EADvD,SAKR,yBAAKE,MAAO,CACVC,SAAU,QACVO,MAAO,EACPF,OAAQ,EACRG,MAAO,OACPC,gBAAiB,SACjBC,YAAa,OACbC,OAAO,GAAD,OAAKd,EAAL,UC/EAe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1fd2bd88.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nconst keys =\n  'asdfghjklzxcvbnmqwertyuiop1234567890!@#$%^&*()_+-=';\n\nfunction App() {\n    const [key, setKey] = useState(\n        keys[Math.floor(Math.random() * keys.length)]\n    );\n    const [stat, setStat] = useState({ correct: 0, incorrect: 0 });\n    const [seconds, setSeconds] = useState(0);\n\n    useEffect(() => {\n        const handleUserKeyPress = e => {\n            console.log(e.key, key);\n            if (e.key === key) {\n                setKey(keys[Math.floor(Math.random() * keys.length)]);\n                setStat({ ...stat, correct: stat.correct + 1 });\n            } else {\n                setStat({ ...stat, incorrect: stat.incorrect + 1 });\n            }\n        };\n        document.addEventListener(\"keypress\", handleUserKeyPress);\n        return () => {\n            document.removeEventListener(\"keypress\", handleUserKeyPress);\n        };\n    });\n\n    useInterval(() => {\n        setSeconds(seconds + 1);\n    }, 1000);\n\n    const styles = {\n        position: \"fixed\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        fontSize: \"200px\"\n    };\n\n    const percent = Math.floor(\n        (stat.correct / (stat.correct + stat.incorrect)) * 100\n    );\n\n    return (\n        <div className=\"App\">\n            <div style={styles}>{key}</div>\n            <div\n                style={{\n                    position: \"fixed\",\n                    bottom: 0,\n                    left: 0,\n                    padding: \"20px\"\n                }}\n            >\n                <ul>\n                    <li>Время: {seconds} секунд прошло</li>\n                    <li>Правильно: {stat.correct}</li>\n                    <li>Не правильно: {stat.incorrect}</li>\n                    <li>\n                        Всего ответов: {stat.correct + stat.incorrect} - ({percent} %)\n                    </li>\n                </ul>\n            </div>\n            <div style={{\n              position: 'fixed',\n              right: 0,\n              bottom: 0,\n              width: '20px',\n              backgroundColor: 'orange',\n              marginRight: '20px',\n              height: `${percent}%`\n              }}></div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}